{"version":3,"sources":["pages/Recording.js","pages/Overall.js","App.js","serviceWorker.js","store.js","index.js"],"names":["Recording","props","toggleRecording","e","a","preventDefault","recording","isRecording","STOP_RECORDING","axios","post","baseFunctions","base_url","data","START_RECORDING","onFormChange","target","name","value","recording_id","setState","NEW_LOG","onSubmitSymptom","newLog","APPEND_LOG","bind","this","onClick","onSubmit","onChange","type","symptom","severity","min","max","location","notes","to","Component","connect","state","dispatch","payload","logObject","Overall","overallSubmission","console","log","completed","overall","abdPain","bloating","wind","COMPLETE_RECORDING","AppDiv","styled","div","Banner","Title","h1","NavBar","nav","StyleLink","Link","App","process","ADD_DEV_URL","className","exact","path","url","Boolean","window","hostname","match","rootReducer","combineReducers","action","base","log_history","shortid","timestamp","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6ff87a4.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport ReactDOM from 'react-dom';\r\nimport axios from 'axios'\r\nimport { Link } from 'react-router-dom' \r\n\r\nconst initialState = {}\r\n\r\nclass Recording extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.toggleRecording = this.toggleRecording.bind(this)\r\n        this.onFormChange = this.onFormChange.bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState(this.props.newLog)\r\n    }\r\n\r\n    toggleRecording = async e => {\r\n        e.preventDefault()  \r\n        if (this.props.recording.isRecording){\r\n            this.props.STOP_RECORDING()\r\n        } else {\r\n            let {data} = await axios.post(`${this.props.baseFunctions.base_url}/recording`)\r\n            this.props.START_RECORDING(data)\r\n        }\r\n\r\n    }\r\n\r\n    onFormChange = e => {\r\n        let data = {[e.target.name]:e.target.value, recording_id:this.props.recording.recording_id}\r\n        this.setState({[e.target.name]:e.target.value, recording_id:this.props.recording.recording_id})\r\n        this.props.NEW_LOG(this.props.recording_id, data)\r\n    }\r\n    \r\n    onSubmitSymptom = async e => {\r\n        e.preventDefault()\r\n        let { data } = await axios.post(`${this.props.baseFunctions.base_url}/symptom`, this.props.newLog)\r\n        data = {...data, recording_id:this.props.recording.recording_id}\r\n        this.props.APPEND_LOG(data)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Recording Station üéô</h1>\r\n                <button onClick={this.toggleRecording}>{this.props.recording.isRecording ? 'üõë Stop Recording': '‚è∫ Start Recording'}</button>\r\n                <p>RECORDING ID: {this.props.recording.isRecording ? this.props.recording.recording_id : 'not recording'}</p>\r\n                <form onSubmit={this.onSubmitSymptom}>\r\n                    <label>Symptom: </label> <input onChange={this.onFormChange} name='symptom' type='text' value={this.props.newLog.symptom}></input> <br/>\r\n                    <label>Severity: </label> <input onChange={this.onFormChange} name='severity' type='range' value={this.props.newLog.severity} min='0' max='10'></input> <br/>\r\n                    <label>Location: </label> <input onChange={this.onFormChange} name='location' type='text' value={this.props.newLog.location} /> <br/>\r\n                    <label>Notes: </label> <input onChange={this.onFormChange} name='notes' type='text' value={this.props.newLog.notes} /> <br/>\r\n                    <input type='submit'/>\r\n                </form>\r\n                <div>\r\n                    { !this.props.recording.isRecording ? <Link to='/overall'>Rate Overall Feelings</Link> : 'look here when you finish recording!' }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    ...state\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    START_RECORDING: recording_id => dispatch({type:'START_RECORDING', payload:recording_id}),\r\n    STOP_RECORDING: () => dispatch({type:'STOP_RECORDING'}),\r\n    NEW_LOG: (recording_id, logObject) => dispatch({type:'NEW_LOG', payload:{recording_id:recording_id, ...logObject}}),\r\n    APPEND_LOG: data => dispatch({type:'APPEND_LOG', payload:data}),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Recording)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport axios from 'axios'\r\n\r\nclass Overall extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.onChange = this.onChange.bind(this)\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.setState({\r\n            overall:5,\r\n            abdPain:5,\r\n            bloating:5,\r\n            wind:5,\r\n        })\r\n    }\r\n\r\n    onChange = async e => {\r\n        this.setState({[e.target.name]:e.target.value})\r\n    }\r\n\r\n    onSubmit = async e => {\r\n        e.preventDefault()\r\n        let recording_id = {recording_id:this.props.recording.recording_id}\r\n        let overallSubmission = await axios.post(\r\n            `${this.props.baseFunctions.base_url}/overall`,\r\n            {...recording_id, ...this.state}\r\n        )\r\n        overallSubmission ? console.log('DONE', overallSubmission) : console.log('SOMETHING WENT WRONG...')\r\n        this.setState({completed:true})\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Overall Feeling</h1>\r\n                <p>{this.props.recording.recording_id || 'NO ID ATM...'}</p>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <label>Overall</label> <input onChange={this.onChange} name='overall' type='range' min='0' max='10'/> <br/>\r\n                    <label>Abdominal Pain</label> <input onChange={this.onChange} name='abdPain' type='range' min='0' max='10'/> <br/>\r\n                    <label>Bloating</label> <input onChange={this.onChange} name='bloating' type='range' min='0' max='10'/> <br/>\r\n                    <label>Wind</label> <input onChange={this.onChange} name='wind' type='range' min='0' max='10'/> <br/>\r\n                    <label>Notes</label> <input onChange={this.onChange} name='notes' type='text'/>   \r\n                    <input type='submit'/>                 \r\n                </form>\r\n                <div>{this.state.completed ? <Link to='/'>Go Home üòá</Link> : 'plz submit your overall ratings...'}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    ...state\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    COMPLETE_RECORDING: () => dispatch({type:'COMPLETE_RECORDING'})\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Overall)","import React, {Component} from 'react';\nimport { BrowserRouter as Router, Link, Switch, Route } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\n\nimport Recording from './pages/Recording';\nimport Overall from './pages/Overall';\n\nconst AppDiv = styled.div`\n  @import url('https://fonts.googleapis.com/css?family=Poppins&display=swap');\n  font-family: 'Poppins', sans-serif;\n`\n\nconst Banner = styled.div`\n  margin:0\n  padding:32pt\n`\n\nconst Title = styled.h1`\n  margin:0\n  text-align:center\n`\n\nconst NavBar = styled.nav`\n  display:flex\n  height:32pt;\n  align-items:center\n  justify-content:space-around\n`\n\nconst StyleLink = styled(Link)`\n  text-decoration:none\n`\n\nclass App extends Component {\n\n  componentDidMount(){\n    console.log(process.env.NODE_ENV)\n    if (process.env.NODE_ENV === 'development') {\n      let DEV_URL = 'http://localhost:8080/api'\n      this.props.ADD_DEV_URL(DEV_URL)\n    }\n    if (process.env.NODE_ENV === 'production'){\n      let URL = 'api'\n      console.log(URL)\n      this.props.ADD_DEV_URL(URL)\n    }\n  }\n  \n  render(){\n    return (\n      <Router>\n        <AppDiv className=\"App\">\n\n          <Banner>\n            <Title>The Noisy Guts Project</Title>\n          </Banner>\n  \n          <NavBar>\n            <StyleLink to='/'>Home</StyleLink>\n            <StyleLink to='/recording'>Start Recording</StyleLink>\n            <StyleLink to='/'>Some Random Link</StyleLink>\n            <StyleLink to='/'>Like and Subüëç</StyleLink>\n          </NavBar>\n  \n          <Switch>\n            <Route exact path='/'><h1>START RECORDING</h1></Route> \n            <Route exact path='/recording'> <Recording /></Route> \n            <Route exact path='/overall'> <Overall /></Route>\n          </Switch>\n  \n        </AppDiv>\n      </Router>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  ...state\n})\n\nconst mapDispatchToProps = dispatch => ({\n  ADD_DEV_URL: url => dispatch({type:'ADD_API_BASE_URL', payload:url})\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore } from 'redux'\r\nimport { combineReducers  } from 'redux'\r\n\r\nconst baseFunctions = (state = {}, action) => {\r\n    switch(action.type){\r\n        case 'ADD_API_BASE_URL':\r\n            let base = action.payload\r\n            state = {...state, base_url:base}\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n} \r\n\r\nconst recording = (state = {recording_id:'', log_history:[], isRecording:false}, action) => {\r\n    switch(action.type){\r\n        case 'START_RECORDING':\r\n            const { shortid, timestamp, notes } = action.payload\r\n            console.log(shortid, timestamp, notes)\r\n            state = {...state, isRecording:true, recording_id:shortid}\r\n            state = {...state, log_history:[]}\r\n            console.log(state)\r\n            return state\r\n        case 'APPEND_LOG':\r\n            state = {...state, log_history:[...state.log_history, action.payload]}\r\n            return state\r\n        case 'STOP_RECORDING':\r\n            state = {...state, isRecording:false}\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst newLog = (state = [], action) => {\r\n    switch(action.type){\r\n        case 'NEW_LOG':\r\n            state = {...state, ...action.payload}\r\n            return state\r\n        case 'APPEND_LOG':\r\n            state = {recording_id:'',symptom:'',severity:'', location:'',notes:''}\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst overallLogs = (state = [], action) => {\r\n    switch(action.type){\r\n        case 'NEW_OVERALL':\r\n            state = {...state, ...action.payload}\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    baseFunctions,\r\n    newLog,\r\n    recording\r\n})\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n)\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n    <Provider store={store}><App /></Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}